#!/usr/bin/env python

import sys
import os
import nltk
from name_entity_processing import NEP
from parse import Parse
from tokenize import Tokenize
from nltk.tree import Tree as Tree
from when_answer import When_answer
from when_answer import Where_answer
from answer_bin import Answer_Bin
reload(sys)  
sys.setdefaultencoding('utf8')

sNLP = Parse()
When_answer = When_answer()
Where_answer = Where_answer()

class Answer:
    
    """ command:  ./answer article.txt questions.txt """ 
    def get_label(self, question):
    		tree = sNLP.parse(question)
		tree = Tree.fromstring(str(tree))
		for s in tree.subtrees(lambda t: t.label() == "WP" or t.label() == "WRB"):
			if "who" in s.leaves() or "Who" in s.leaves():
				return "who"
			if "what" in s.leaves() or "What" in s.leaves():
				return "what"
			if "why" in s.leaves() or "Why" in s.leaves():
				return "why"
			if "where" in s.leaves() or "Where" in s.leaves():
				return "where"
			if "when" in s.leaves() or "When" in s.leaves():
				return "when"
			else:
				return "other"
		for s in tree.subtrees(lambda t: t.label() == "WP$"):
			return "other"
		return "binary"

    def read_txt(self, dir):
        with open(dir) as f:
            body = f.readlines()
        body = [x.strip() for x in body] 
        return body

    def main(self):
        sentences = Tokenize.main(20, article, False)[0]
        # print sentences
        # print self.read_txt(questions)
        for question in self.read_txt(questions):
            print question
            label = self.get_label(question)
            relevant = Answer_Bin.easy_find(question, sentences)
            if label == "when":
                print When_answer.get_answer(question, relevant)
            elif label == "where":
                print Where_answer.get_answer(question, relevant)
            else:
                print relevant


        
        
Answer_Bin = Answer_Bin()
Tokenize = Tokenize()
article = sys.argv[1]
questions = sys.argv[2]
A = Answer()
A.main()
